//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace E2ERepositories
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class E2EWebPortalEntities : DbContext
    {
        public E2EWebPortalEntities()
            : base("name=E2EWebPortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Business> Businesses { get; set; }
        public virtual DbSet<E2E_UserRole> E2E_UserRole { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<z> z { get; set; }
        public virtual DbSet<Reviewer> Reviewers { get; set; }
        public virtual DbSet<Subscription> Subscriptions { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
        public virtual DbSet<WebAppOwner> WebAppOwners { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
        public virtual DbSet<UserMI> UserMIS { get; set; }
        public virtual DbSet<EmployerAdmin> EmployerAdmins { get; set; }
        public virtual DbSet<TaskReviewComment> TaskReviewComments { get; set; }
        public virtual DbSet<NewTaskInsertLog> NewTaskInsertLogs { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<EndClient> EndClients { get; set; }
        public virtual DbSet<sysmail_account_credential> sysmail_account_credential { get; set; }
    
        public virtual int sp_AddErrorLog(string userName, string errorMessage)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddErrorLog", userNameParameter, errorMessageParameter);
        }
    
        public virtual ObjectResult<sp_E2EWebPortalLogin_Result> sp_E2EWebPortalLogin(string userName, string password, ObjectParameter op_RoleID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_E2EWebPortalLogin_Result>("sp_E2EWebPortalLogin", userNameParameter, passwordParameter, op_RoleID);
        }
    
        public virtual ObjectResult<sp_Login_Result> sp_Login(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Login_Result>("sp_Login", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> test()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("test");
        }
    
        public virtual ObjectResult<sp_GetSubscriptionInfo_Result> sp_GetSubscriptionInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSubscriptionInfo_Result>("sp_GetSubscriptionInfo");
        }
    
        public virtual int sp_ManageBusinessActivation(string isActive, Nullable<int> employerID)
        {
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ManageBusinessActivation", isActiveParameter, employerIDParameter);
        }
    
        public virtual ObjectResult<sp_InsertNewBusiness_Result> sp_InsertNewBusiness(string employerName, string businessName, string businessAddress1, string businessAddress2, string city, string state, string zip, string phone, string fax, string primaryEmail, string secondaryEmail, string uRL, Nullable<int> totalEmployees, string businessTaxID, string active, string userName, Nullable<System.DateTime> subscriptionDate, string serviceDetails, string subscriptionType, string subscriptionPlanName, string subscriptionPlanCode, Nullable<int> totalLogin, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, Nullable<decimal> amountCharged, Nullable<decimal> registrationFeeCharged, Nullable<decimal> subscriptionFeeCharged, Nullable<System.DateTime> paymentDueDate)
        {
            var employerNameParameter = employerName != null ?
                new ObjectParameter("EmployerName", employerName) :
                new ObjectParameter("EmployerName", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var businessAddress1Parameter = businessAddress1 != null ?
                new ObjectParameter("BusinessAddress1", businessAddress1) :
                new ObjectParameter("BusinessAddress1", typeof(string));
    
            var businessAddress2Parameter = businessAddress2 != null ?
                new ObjectParameter("BusinessAddress2", businessAddress2) :
                new ObjectParameter("BusinessAddress2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var totalEmployeesParameter = totalEmployees.HasValue ?
                new ObjectParameter("TotalEmployees", totalEmployees) :
                new ObjectParameter("TotalEmployees", typeof(int));
    
            var businessTaxIDParameter = businessTaxID != null ?
                new ObjectParameter("BusinessTaxID", businessTaxID) :
                new ObjectParameter("BusinessTaxID", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var subscriptionDateParameter = subscriptionDate.HasValue ?
                new ObjectParameter("SubscriptionDate", subscriptionDate) :
                new ObjectParameter("SubscriptionDate", typeof(System.DateTime));
    
            var serviceDetailsParameter = serviceDetails != null ?
                new ObjectParameter("ServiceDetails", serviceDetails) :
                new ObjectParameter("ServiceDetails", typeof(string));
    
            var subscriptionTypeParameter = subscriptionType != null ?
                new ObjectParameter("SubscriptionType", subscriptionType) :
                new ObjectParameter("SubscriptionType", typeof(string));
    
            var subscriptionPlanNameParameter = subscriptionPlanName != null ?
                new ObjectParameter("SubscriptionPlanName", subscriptionPlanName) :
                new ObjectParameter("SubscriptionPlanName", typeof(string));
    
            var subscriptionPlanCodeParameter = subscriptionPlanCode != null ?
                new ObjectParameter("SubscriptionPlanCode", subscriptionPlanCode) :
                new ObjectParameter("SubscriptionPlanCode", typeof(string));
    
            var totalLoginParameter = totalLogin.HasValue ?
                new ObjectParameter("TotalLogin", totalLogin) :
                new ObjectParameter("TotalLogin", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var amountChargedParameter = amountCharged.HasValue ?
                new ObjectParameter("AmountCharged", amountCharged) :
                new ObjectParameter("AmountCharged", typeof(decimal));
    
            var registrationFeeChargedParameter = registrationFeeCharged.HasValue ?
                new ObjectParameter("RegistrationFeeCharged", registrationFeeCharged) :
                new ObjectParameter("RegistrationFeeCharged", typeof(decimal));
    
            var subscriptionFeeChargedParameter = subscriptionFeeCharged.HasValue ?
                new ObjectParameter("SubscriptionFeeCharged", subscriptionFeeCharged) :
                new ObjectParameter("SubscriptionFeeCharged", typeof(decimal));
    
            var paymentDueDateParameter = paymentDueDate.HasValue ?
                new ObjectParameter("PaymentDueDate", paymentDueDate) :
                new ObjectParameter("PaymentDueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_InsertNewBusiness_Result>("sp_InsertNewBusiness", employerNameParameter, businessNameParameter, businessAddress1Parameter, businessAddress2Parameter, cityParameter, stateParameter, zipParameter, phoneParameter, faxParameter, primaryEmailParameter, secondaryEmailParameter, uRLParameter, totalEmployeesParameter, businessTaxIDParameter, activeParameter, userNameParameter, subscriptionDateParameter, serviceDetailsParameter, subscriptionTypeParameter, subscriptionPlanNameParameter, subscriptionPlanCodeParameter, totalLoginParameter, effectiveDateParameter, expirationDateParameter, amountChargedParameter, registrationFeeChargedParameter, subscriptionFeeChargedParameter, paymentDueDateParameter);
        }
    
        public virtual int sp_InsertEmpAdminUser(string userName, string password, Nullable<int> employerID, Nullable<int> roleID, Nullable<int> active, string adminUserFirstName, string adminuserMiddleName, string adminUserLastName, string adminUserNickName, string adminTitle, string address1, string address2, string city, string state, string zip, string workPhoneNumber, string extn, string cellPhoneNumber, string primaryEmail, string secondaryEmail, Nullable<bool> isPrimary)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var adminUserFirstNameParameter = adminUserFirstName != null ?
                new ObjectParameter("AdminUserFirstName", adminUserFirstName) :
                new ObjectParameter("AdminUserFirstName", typeof(string));
    
            var adminuserMiddleNameParameter = adminuserMiddleName != null ?
                new ObjectParameter("AdminuserMiddleName", adminuserMiddleName) :
                new ObjectParameter("AdminuserMiddleName", typeof(string));
    
            var adminUserLastNameParameter = adminUserLastName != null ?
                new ObjectParameter("AdminUserLastName", adminUserLastName) :
                new ObjectParameter("AdminUserLastName", typeof(string));
    
            var adminUserNickNameParameter = adminUserNickName != null ?
                new ObjectParameter("AdminUserNickName", adminUserNickName) :
                new ObjectParameter("AdminUserNickName", typeof(string));
    
            var adminTitleParameter = adminTitle != null ?
                new ObjectParameter("AdminTitle", adminTitle) :
                new ObjectParameter("AdminTitle", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var extnParameter = extn != null ?
                new ObjectParameter("Extn", extn) :
                new ObjectParameter("Extn", typeof(string));
    
            var cellPhoneNumberParameter = cellPhoneNumber != null ?
                new ObjectParameter("CellPhoneNumber", cellPhoneNumber) :
                new ObjectParameter("CellPhoneNumber", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertEmpAdminUser", userNameParameter, passwordParameter, employerIDParameter, roleIDParameter, activeParameter, adminUserFirstNameParameter, adminuserMiddleNameParameter, adminUserLastNameParameter, adminUserNickNameParameter, adminTitleParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipParameter, workPhoneNumberParameter, extnParameter, cellPhoneNumberParameter, primaryEmailParameter, secondaryEmailParameter, isPrimaryParameter);
        }
    
        public virtual ObjectResult<sp_GetBusinessList_Result> sp_GetBusinessList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBusinessList_Result>("sp_GetBusinessList");
        }
    
        public virtual int sp_UpdateLoginCount(Nullable<int> employerID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateLoginCount", employerIDParameter);
        }
    
        public virtual int sp_AddUserSendInvite()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddUserSendInvite");
        }
    
        public virtual int sp_UpsertEmpAdminUser(Nullable<int> adminUserID, string userName, string password, Nullable<int> employerID, Nullable<int> roleID, Nullable<int> active, string adminUserFirstName, string adminuserMiddleName, string adminUserLastName, string adminUserNickName, string adminTitle, string address1, string address2, string city, string state, string zip, string workPhoneNumber, string extn, string cellPhoneNumber, string primaryEmail, string secondaryEmail, Nullable<bool> isPrimary)
        {
            var adminUserIDParameter = adminUserID.HasValue ?
                new ObjectParameter("AdminUserID", adminUserID) :
                new ObjectParameter("AdminUserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var adminUserFirstNameParameter = adminUserFirstName != null ?
                new ObjectParameter("AdminUserFirstName", adminUserFirstName) :
                new ObjectParameter("AdminUserFirstName", typeof(string));
    
            var adminuserMiddleNameParameter = adminuserMiddleName != null ?
                new ObjectParameter("AdminuserMiddleName", adminuserMiddleName) :
                new ObjectParameter("AdminuserMiddleName", typeof(string));
    
            var adminUserLastNameParameter = adminUserLastName != null ?
                new ObjectParameter("AdminUserLastName", adminUserLastName) :
                new ObjectParameter("AdminUserLastName", typeof(string));
    
            var adminUserNickNameParameter = adminUserNickName != null ?
                new ObjectParameter("AdminUserNickName", adminUserNickName) :
                new ObjectParameter("AdminUserNickName", typeof(string));
    
            var adminTitleParameter = adminTitle != null ?
                new ObjectParameter("AdminTitle", adminTitle) :
                new ObjectParameter("AdminTitle", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var extnParameter = extn != null ?
                new ObjectParameter("Extn", extn) :
                new ObjectParameter("Extn", typeof(string));
    
            var cellPhoneNumberParameter = cellPhoneNumber != null ?
                new ObjectParameter("CellPhoneNumber", cellPhoneNumber) :
                new ObjectParameter("CellPhoneNumber", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("IsPrimary", isPrimary) :
                new ObjectParameter("IsPrimary", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpsertEmpAdminUser", adminUserIDParameter, userNameParameter, passwordParameter, employerIDParameter, roleIDParameter, activeParameter, adminUserFirstNameParameter, adminuserMiddleNameParameter, adminUserLastNameParameter, adminUserNickNameParameter, adminTitleParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipParameter, workPhoneNumberParameter, extnParameter, cellPhoneNumberParameter, primaryEmailParameter, secondaryEmailParameter, isPrimaryParameter);
        }
    
        public virtual int sp_UpsertReviewer(Nullable<int> reviewerID, string userName, string password, Nullable<int> employerID, Nullable<int> roleID, Nullable<int> active, string reviewerFirstName, string reviewerMiddleName, string reviewerLastName, string reviewerNickName, string reviewerTitle, Nullable<System.DateTime> dateOfBirth, string address1, string address2, string city, string state, string zip, string workPhoneNumber, string extn, string cellPhoneNumber, string primaryEmail, string secondaryEmail)
        {
            var reviewerIDParameter = reviewerID.HasValue ?
                new ObjectParameter("ReviewerID", reviewerID) :
                new ObjectParameter("ReviewerID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var reviewerFirstNameParameter = reviewerFirstName != null ?
                new ObjectParameter("ReviewerFirstName", reviewerFirstName) :
                new ObjectParameter("ReviewerFirstName", typeof(string));
    
            var reviewerMiddleNameParameter = reviewerMiddleName != null ?
                new ObjectParameter("ReviewerMiddleName", reviewerMiddleName) :
                new ObjectParameter("ReviewerMiddleName", typeof(string));
    
            var reviewerLastNameParameter = reviewerLastName != null ?
                new ObjectParameter("ReviewerLastName", reviewerLastName) :
                new ObjectParameter("ReviewerLastName", typeof(string));
    
            var reviewerNickNameParameter = reviewerNickName != null ?
                new ObjectParameter("ReviewerNickName", reviewerNickName) :
                new ObjectParameter("ReviewerNickName", typeof(string));
    
            var reviewerTitleParameter = reviewerTitle != null ?
                new ObjectParameter("ReviewerTitle", reviewerTitle) :
                new ObjectParameter("ReviewerTitle", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var extnParameter = extn != null ?
                new ObjectParameter("Extn", extn) :
                new ObjectParameter("Extn", typeof(string));
    
            var cellPhoneNumberParameter = cellPhoneNumber != null ?
                new ObjectParameter("CellPhoneNumber", cellPhoneNumber) :
                new ObjectParameter("CellPhoneNumber", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpsertReviewer", reviewerIDParameter, userNameParameter, passwordParameter, employerIDParameter, roleIDParameter, activeParameter, reviewerFirstNameParameter, reviewerMiddleNameParameter, reviewerLastNameParameter, reviewerNickNameParameter, reviewerTitleParameter, dateOfBirthParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipParameter, workPhoneNumberParameter, extnParameter, cellPhoneNumberParameter, primaryEmailParameter, secondaryEmailParameter);
        }
    
        public virtual int sp_UpsertEmployee(Nullable<int> employeeID, string userName, string password, Nullable<int> employerID, Nullable<int> roleID, Nullable<int> active, string firstName, string middleName, string lastName, string nickName, string title, Nullable<System.DateTime> dateOfBirth, string address1, string address2, string city, string state, string zip, string workPhoneNumber, string extn, string cellPhoneNumber, string primaryEmail, string secondaryEmail, string currentVisaStatus, string currentVisaValidity)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var workPhoneNumberParameter = workPhoneNumber != null ?
                new ObjectParameter("WorkPhoneNumber", workPhoneNumber) :
                new ObjectParameter("WorkPhoneNumber", typeof(string));
    
            var extnParameter = extn != null ?
                new ObjectParameter("Extn", extn) :
                new ObjectParameter("Extn", typeof(string));
    
            var cellPhoneNumberParameter = cellPhoneNumber != null ?
                new ObjectParameter("CellPhoneNumber", cellPhoneNumber) :
                new ObjectParameter("CellPhoneNumber", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var currentVisaStatusParameter = currentVisaStatus != null ?
                new ObjectParameter("CurrentVisaStatus", currentVisaStatus) :
                new ObjectParameter("CurrentVisaStatus", typeof(string));
    
            var currentVisaValidityParameter = currentVisaValidity != null ?
                new ObjectParameter("CurrentVisaValidity", currentVisaValidity) :
                new ObjectParameter("CurrentVisaValidity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpsertEmployee", employeeIDParameter, userNameParameter, passwordParameter, employerIDParameter, roleIDParameter, activeParameter, firstNameParameter, middleNameParameter, lastNameParameter, nickNameParameter, titleParameter, dateOfBirthParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipParameter, workPhoneNumberParameter, extnParameter, cellPhoneNumberParameter, primaryEmailParameter, secondaryEmailParameter, currentVisaStatusParameter, currentVisaValidityParameter);
        }
    
        public virtual int sp_Delete_EA_Rew_Emp(Nullable<int> roleID, Nullable<int> employerID, Nullable<int> userID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Delete_EA_Rew_Emp", roleIDParameter, employerIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<sp_GetList_EA_Rew_Emp_Result> sp_GetList_EA_Rew_Emp(Nullable<int> roleID, Nullable<int> employerID, Nullable<int> userID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetList_EA_Rew_Emp_Result>("sp_GetList_EA_Rew_Emp", roleIDParameter, employerIDParameter, userIDParameter);
        }
    
        public virtual int sp_ManageActivation_EA_Rew_Emp(Nullable<int> roleID, Nullable<int> employerID, Nullable<int> userID, string isActive)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ManageActivation_EA_Rew_Emp", roleIDParameter, employerIDParameter, userIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<sp_GetSubscriptionDetails_AdminUser_Result> sp_GetSubscriptionDetails_AdminUser(Nullable<int> employerID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSubscriptionDetails_AdminUser_Result>("sp_GetSubscriptionDetails_AdminUser", employerIDParameter);
        }
    
        public virtual int sp_CreateNewTaskWeekly(Nullable<System.DateTime> setipDate)
        {
            var setipDateParameter = setipDate.HasValue ?
                new ObjectParameter("SetipDate", setipDate) :
                new ObjectParameter("SetipDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateNewTaskWeekly", setipDateParameter);
        }
    
        public virtual ObjectResult<sp_GetEmployeeList_Result> sp_GetEmployeeList(Nullable<int> employerID, Nullable<int> employeeID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEmployeeList_Result>("sp_GetEmployeeList", employerIDParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<sp_GetEmployerAdminList_Result> sp_GetEmployerAdminList(Nullable<int> employerID, Nullable<int> adminUserID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var adminUserIDParameter = adminUserID.HasValue ?
                new ObjectParameter("AdminUserID", adminUserID) :
                new ObjectParameter("AdminUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEmployerAdminList_Result>("sp_GetEmployerAdminList", employerIDParameter, adminUserIDParameter);
        }
    
        public virtual ObjectResult<sp_GetReviewerList_Result> sp_GetReviewerList(Nullable<int> employerID, Nullable<int> reviewerID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var reviewerIDParameter = reviewerID.HasValue ?
                new ObjectParameter("ReviewerID", reviewerID) :
                new ObjectParameter("ReviewerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReviewerList_Result>("sp_GetReviewerList", employerIDParameter, reviewerIDParameter);
        }
    
        public virtual ObjectResult<sp_GetWebAppOwnerList_Result> sp_GetWebAppOwnerList(Nullable<int> employerID, Nullable<int> appOwnerAdminId)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var appOwnerAdminIdParameter = appOwnerAdminId.HasValue ?
                new ObjectParameter("AppOwnerAdminId", appOwnerAdminId) :
                new ObjectParameter("AppOwnerAdminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWebAppOwnerList_Result>("sp_GetWebAppOwnerList", employerIDParameter, appOwnerAdminIdParameter);
        }
    
        public virtual int sp_UpsertComments(Nullable<int> commentID, Nullable<int> reviewerID, Nullable<int> employerID, string commendDescription, string isDefault)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            var reviewerIDParameter = reviewerID.HasValue ?
                new ObjectParameter("ReviewerID", reviewerID) :
                new ObjectParameter("ReviewerID", typeof(int));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var commendDescriptionParameter = commendDescription != null ?
                new ObjectParameter("CommendDescription", commendDescription) :
                new ObjectParameter("CommendDescription", typeof(string));
    
            var isDefaultParameter = isDefault != null ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpsertComments", commentIDParameter, reviewerIDParameter, employerIDParameter, commendDescriptionParameter, isDefaultParameter);
        }
    
        public virtual int sp_UpsertEndClient(Nullable<int> endClientID, Nullable<int> employeeID, Nullable<int> employerID, string endClientBusinessName, string employeeTitleAtEndClientSite, string endClientAddress1, string endClientAddress2, string endClientCity, string endClientState, string endClientzip, string endClientPhoneNumber, string endClientExtn, string employeeEmailAtEndClient)
        {
            var endClientIDParameter = endClientID.HasValue ?
                new ObjectParameter("EndClientID", endClientID) :
                new ObjectParameter("EndClientID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var endClientBusinessNameParameter = endClientBusinessName != null ?
                new ObjectParameter("EndClientBusinessName", endClientBusinessName) :
                new ObjectParameter("EndClientBusinessName", typeof(string));
    
            var employeeTitleAtEndClientSiteParameter = employeeTitleAtEndClientSite != null ?
                new ObjectParameter("EmployeeTitleAtEndClientSite", employeeTitleAtEndClientSite) :
                new ObjectParameter("EmployeeTitleAtEndClientSite", typeof(string));
    
            var endClientAddress1Parameter = endClientAddress1 != null ?
                new ObjectParameter("EndClientAddress1", endClientAddress1) :
                new ObjectParameter("EndClientAddress1", typeof(string));
    
            var endClientAddress2Parameter = endClientAddress2 != null ?
                new ObjectParameter("EndClientAddress2", endClientAddress2) :
                new ObjectParameter("EndClientAddress2", typeof(string));
    
            var endClientCityParameter = endClientCity != null ?
                new ObjectParameter("EndClientCity", endClientCity) :
                new ObjectParameter("EndClientCity", typeof(string));
    
            var endClientStateParameter = endClientState != null ?
                new ObjectParameter("EndClientState", endClientState) :
                new ObjectParameter("EndClientState", typeof(string));
    
            var endClientzipParameter = endClientzip != null ?
                new ObjectParameter("EndClientzip", endClientzip) :
                new ObjectParameter("EndClientzip", typeof(string));
    
            var endClientPhoneNumberParameter = endClientPhoneNumber != null ?
                new ObjectParameter("EndClientPhoneNumber", endClientPhoneNumber) :
                new ObjectParameter("EndClientPhoneNumber", typeof(string));
    
            var endClientExtnParameter = endClientExtn != null ?
                new ObjectParameter("EndClientExtn", endClientExtn) :
                new ObjectParameter("EndClientExtn", typeof(string));
    
            var employeeEmailAtEndClientParameter = employeeEmailAtEndClient != null ?
                new ObjectParameter("EmployeeEmailAtEndClient", employeeEmailAtEndClient) :
                new ObjectParameter("EmployeeEmailAtEndClient", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpsertEndClient", endClientIDParameter, employeeIDParameter, employerIDParameter, endClientBusinessNameParameter, employeeTitleAtEndClientSiteParameter, endClientAddress1Parameter, endClientAddress2Parameter, endClientCityParameter, endClientStateParameter, endClientzipParameter, endClientPhoneNumberParameter, endClientExtnParameter, employeeEmailAtEndClientParameter);
        }
    
        public virtual int sp_UpdateTaskReview(Nullable<int> employerID, Nullable<int> reviewerID, Nullable<int> employeeID, Nullable<int> taskID, string weekPeriod, string taskSubmissionStatus, Nullable<System.DateTime> reviewDate, string reviewComments)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var reviewerIDParameter = reviewerID.HasValue ?
                new ObjectParameter("ReviewerID", reviewerID) :
                new ObjectParameter("ReviewerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            var weekPeriodParameter = weekPeriod != null ?
                new ObjectParameter("WeekPeriod", weekPeriod) :
                new ObjectParameter("WeekPeriod", typeof(string));
    
            var taskSubmissionStatusParameter = taskSubmissionStatus != null ?
                new ObjectParameter("TaskSubmissionStatus", taskSubmissionStatus) :
                new ObjectParameter("TaskSubmissionStatus", typeof(string));
    
            var reviewDateParameter = reviewDate.HasValue ?
                new ObjectParameter("ReviewDate", reviewDate) :
                new ObjectParameter("ReviewDate", typeof(System.DateTime));
    
            var reviewCommentsParameter = reviewComments != null ?
                new ObjectParameter("ReviewComments", reviewComments) :
                new ObjectParameter("ReviewComments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateTaskReview", employerIDParameter, reviewerIDParameter, employeeIDParameter, taskIDParameter, weekPeriodParameter, taskSubmissionStatusParameter, reviewDateParameter, reviewCommentsParameter);
        }
    
        public virtual ObjectResult<sp_GetEndClientInfo_Result> sp_GetEndClientInfo(Nullable<int> employerID, Nullable<int> employeeID, Nullable<int> endClientID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var endClientIDParameter = endClientID.HasValue ?
                new ObjectParameter("EndClientID", endClientID) :
                new ObjectParameter("EndClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEndClientInfo_Result>("sp_GetEndClientInfo", employerIDParameter, employeeIDParameter, endClientIDParameter);
        }
    
        public virtual ObjectResult<sp_GetListWeekPeriod_Result> sp_GetListWeekPeriod(Nullable<int> employerID, Nullable<int> userID, Nullable<int> roleID, ObjectParameter weekperiod)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetListWeekPeriod_Result>("sp_GetListWeekPeriod", employerIDParameter, userIDParameter, roleIDParameter, weekperiod);
        }
    
        public virtual int sp_AddUpdateTaskDetails(Nullable<int> employerID, Nullable<int> employeeID, string weekPeriod, Nullable<decimal> hoursBilled, string taskDetails, string anyIssues, string solution, string percentCompleted, Nullable<System.DateTime> submissionDate, string taskContinueFromLastWeekPeriod, string taskContinueToNextWeekPeriod)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var weekPeriodParameter = weekPeriod != null ?
                new ObjectParameter("WeekPeriod", weekPeriod) :
                new ObjectParameter("WeekPeriod", typeof(string));
    
            var hoursBilledParameter = hoursBilled.HasValue ?
                new ObjectParameter("HoursBilled", hoursBilled) :
                new ObjectParameter("HoursBilled", typeof(decimal));
    
            var taskDetailsParameter = taskDetails != null ?
                new ObjectParameter("TaskDetails", taskDetails) :
                new ObjectParameter("TaskDetails", typeof(string));
    
            var anyIssuesParameter = anyIssues != null ?
                new ObjectParameter("AnyIssues", anyIssues) :
                new ObjectParameter("AnyIssues", typeof(string));
    
            var solutionParameter = solution != null ?
                new ObjectParameter("Solution", solution) :
                new ObjectParameter("Solution", typeof(string));
    
            var percentCompletedParameter = percentCompleted != null ?
                new ObjectParameter("PercentCompleted", percentCompleted) :
                new ObjectParameter("PercentCompleted", typeof(string));
    
            var submissionDateParameter = submissionDate.HasValue ?
                new ObjectParameter("SubmissionDate", submissionDate) :
                new ObjectParameter("SubmissionDate", typeof(System.DateTime));
    
            var taskContinueFromLastWeekPeriodParameter = taskContinueFromLastWeekPeriod != null ?
                new ObjectParameter("TaskContinueFromLastWeekPeriod", taskContinueFromLastWeekPeriod) :
                new ObjectParameter("TaskContinueFromLastWeekPeriod", typeof(string));
    
            var taskContinueToNextWeekPeriodParameter = taskContinueToNextWeekPeriod != null ?
                new ObjectParameter("TaskContinueToNextWeekPeriod", taskContinueToNextWeekPeriod) :
                new ObjectParameter("TaskContinueToNextWeekPeriod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddUpdateTaskDetails", employerIDParameter, employeeIDParameter, weekPeriodParameter, hoursBilledParameter, taskDetailsParameter, anyIssuesParameter, solutionParameter, percentCompletedParameter, submissionDateParameter, taskContinueFromLastWeekPeriodParameter, taskContinueToNextWeekPeriodParameter);
        }
    
        public virtual int sp_CreateNewTaskWeekly1(Nullable<System.DateTime> setipDate, string employerID)
        {
            var setipDateParameter = setipDate.HasValue ?
                new ObjectParameter("SetipDate", setipDate) :
                new ObjectParameter("SetipDate", typeof(System.DateTime));
    
            var employerIDParameter = employerID != null ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateNewTaskWeekly1", setipDateParameter, employerIDParameter);
        }
    
        public virtual ObjectResult<rpt_ClientSiteActivity_Result> rpt_ClientSiteActivity(Nullable<int> roleID, Nullable<int> employerID, Nullable<int> adminUserID, Nullable<int> userID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var adminUserIDParameter = adminUserID.HasValue ?
                new ObjectParameter("AdminUserID", adminUserID) :
                new ObjectParameter("AdminUserID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_ClientSiteActivity_Result>("rpt_ClientSiteActivity", roleIDParameter, employerIDParameter, adminUserIDParameter, userIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rpt_GetBeneficiaryList_Result> rpt_GetBeneficiaryList(Nullable<int> roleID, Nullable<int> employerID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetBeneficiaryList_Result>("rpt_GetBeneficiaryList", roleIDParameter, employerIDParameter);
        }
    
        public virtual ObjectResult<rpt_GetListWeekPeriod_Result> rpt_GetListWeekPeriod(Nullable<int> employerID, Nullable<int> userID, Nullable<int> roleID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetListWeekPeriod_Result>("rpt_GetListWeekPeriod", employerIDParameter, userIDParameter, roleIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int sp_DeleteReviewComments(Nullable<int> employerID, Nullable<int> commentID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteReviewComments", employerIDParameter, commentIDParameter);
        }
    
        public virtual ObjectResult<sp_GetAllReviewComments_Result> sp_GetAllReviewComments(Nullable<int> employerID, Nullable<int> commentID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllReviewComments_Result>("sp_GetAllReviewComments", employerIDParameter, commentIDParameter);
        }
    
        public virtual int sp_ActiveDeactiveEndClient(Nullable<int> employerID, Nullable<int> endClientID, string active)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var endClientIDParameter = endClientID.HasValue ?
                new ObjectParameter("EndClientID", endClientID) :
                new ObjectParameter("EndClientID", typeof(int));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActiveDeactiveEndClient", employerIDParameter, endClientIDParameter, activeParameter);
        }
    
        public virtual int sp_DeleteEndClient(Nullable<int> employerID, Nullable<int> endClientID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var endClientIDParameter = endClientID.HasValue ?
                new ObjectParameter("EndClientID", endClientID) :
                new ObjectParameter("EndClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteEndClient", employerIDParameter, endClientIDParameter);
        }
    
        public virtual ObjectResult<sp_GetTaskDetailsByWeekPeriod_Result> sp_GetTaskDetailsByWeekPeriod(Nullable<int> roleID, Nullable<int> employerID, Nullable<int> reviewerID, Nullable<int> employeeID, string weekPeriod)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var reviewerIDParameter = reviewerID.HasValue ?
                new ObjectParameter("ReviewerID", reviewerID) :
                new ObjectParameter("ReviewerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var weekPeriodParameter = weekPeriod != null ?
                new ObjectParameter("WeekPeriod", weekPeriod) :
                new ObjectParameter("WeekPeriod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskDetailsByWeekPeriod_Result>("sp_GetTaskDetailsByWeekPeriod", roleIDParameter, employerIDParameter, reviewerIDParameter, employeeIDParameter, weekPeriodParameter);
        }
    
        public virtual int sp_MakeDefaultTaskReviewComment(Nullable<int> employerID, Nullable<int> commentID, string isDefault)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            var isDefaultParameter = isDefault != null ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MakeDefaultTaskReviewComment", employerIDParameter, commentIDParameter, isDefaultParameter);
        }
    
        public virtual int sp_Delete_Employer(Nullable<int> employerID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Delete_Employer", employerIDParameter);
        }
    
        public virtual int sp_EditNewBusiness(Nullable<int> employerID, string employerName, string businessName, string businessAddress1, string businessAddress2, string city, string state, string zip, string phone, string fax, string primaryEmail, string secondaryEmail, string uRL, Nullable<int> totalEmployees, string businessTaxID, string active, string userName, Nullable<int> subscriptionID, Nullable<System.DateTime> subscriptionDate, string serviceDetails, string subscriptionType, string subscriptionPlanName, string subscriptionPlanCode, Nullable<int> totalLogin, Nullable<System.DateTime> effectiveDate, Nullable<System.DateTime> expirationDate, Nullable<decimal> amountCharged, Nullable<decimal> registrationFeeCharged, Nullable<decimal> subscriptionFeeCharged, Nullable<System.DateTime> paymentDueDate)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var employerNameParameter = employerName != null ?
                new ObjectParameter("EmployerName", employerName) :
                new ObjectParameter("EmployerName", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var businessAddress1Parameter = businessAddress1 != null ?
                new ObjectParameter("BusinessAddress1", businessAddress1) :
                new ObjectParameter("BusinessAddress1", typeof(string));
    
            var businessAddress2Parameter = businessAddress2 != null ?
                new ObjectParameter("BusinessAddress2", businessAddress2) :
                new ObjectParameter("BusinessAddress2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var primaryEmailParameter = primaryEmail != null ?
                new ObjectParameter("PrimaryEmail", primaryEmail) :
                new ObjectParameter("PrimaryEmail", typeof(string));
    
            var secondaryEmailParameter = secondaryEmail != null ?
                new ObjectParameter("SecondaryEmail", secondaryEmail) :
                new ObjectParameter("SecondaryEmail", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var totalEmployeesParameter = totalEmployees.HasValue ?
                new ObjectParameter("TotalEmployees", totalEmployees) :
                new ObjectParameter("TotalEmployees", typeof(int));
    
            var businessTaxIDParameter = businessTaxID != null ?
                new ObjectParameter("BusinessTaxID", businessTaxID) :
                new ObjectParameter("BusinessTaxID", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var subscriptionIDParameter = subscriptionID.HasValue ?
                new ObjectParameter("SubscriptionID", subscriptionID) :
                new ObjectParameter("SubscriptionID", typeof(int));
    
            var subscriptionDateParameter = subscriptionDate.HasValue ?
                new ObjectParameter("SubscriptionDate", subscriptionDate) :
                new ObjectParameter("SubscriptionDate", typeof(System.DateTime));
    
            var serviceDetailsParameter = serviceDetails != null ?
                new ObjectParameter("ServiceDetails", serviceDetails) :
                new ObjectParameter("ServiceDetails", typeof(string));
    
            var subscriptionTypeParameter = subscriptionType != null ?
                new ObjectParameter("SubscriptionType", subscriptionType) :
                new ObjectParameter("SubscriptionType", typeof(string));
    
            var subscriptionPlanNameParameter = subscriptionPlanName != null ?
                new ObjectParameter("SubscriptionPlanName", subscriptionPlanName) :
                new ObjectParameter("SubscriptionPlanName", typeof(string));
    
            var subscriptionPlanCodeParameter = subscriptionPlanCode != null ?
                new ObjectParameter("SubscriptionPlanCode", subscriptionPlanCode) :
                new ObjectParameter("SubscriptionPlanCode", typeof(string));
    
            var totalLoginParameter = totalLogin.HasValue ?
                new ObjectParameter("TotalLogin", totalLogin) :
                new ObjectParameter("TotalLogin", typeof(int));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var amountChargedParameter = amountCharged.HasValue ?
                new ObjectParameter("AmountCharged", amountCharged) :
                new ObjectParameter("AmountCharged", typeof(decimal));
    
            var registrationFeeChargedParameter = registrationFeeCharged.HasValue ?
                new ObjectParameter("RegistrationFeeCharged", registrationFeeCharged) :
                new ObjectParameter("RegistrationFeeCharged", typeof(decimal));
    
            var subscriptionFeeChargedParameter = subscriptionFeeCharged.HasValue ?
                new ObjectParameter("SubscriptionFeeCharged", subscriptionFeeCharged) :
                new ObjectParameter("SubscriptionFeeCharged", typeof(decimal));
    
            var paymentDueDateParameter = paymentDueDate.HasValue ?
                new ObjectParameter("PaymentDueDate", paymentDueDate) :
                new ObjectParameter("PaymentDueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditNewBusiness", employerIDParameter, employerNameParameter, businessNameParameter, businessAddress1Parameter, businessAddress2Parameter, cityParameter, stateParameter, zipParameter, phoneParameter, faxParameter, primaryEmailParameter, secondaryEmailParameter, uRLParameter, totalEmployeesParameter, businessTaxIDParameter, activeParameter, userNameParameter, subscriptionIDParameter, subscriptionDateParameter, serviceDetailsParameter, subscriptionTypeParameter, subscriptionPlanNameParameter, subscriptionPlanCodeParameter, totalLoginParameter, effectiveDateParameter, expirationDateParameter, amountChargedParameter, registrationFeeChargedParameter, subscriptionFeeChargedParameter, paymentDueDateParameter);
        }
    
        public virtual ObjectResult<rpt_GetBeneficiaryDetails_Result> rpt_GetBeneficiaryDetails(Nullable<int> roleID, Nullable<int> employerID, Nullable<int> userID, Nullable<int> adminUserID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var adminUserIDParameter = adminUserID.HasValue ?
                new ObjectParameter("AdminUserID", adminUserID) :
                new ObjectParameter("AdminUserID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetBeneficiaryDetails_Result>("rpt_GetBeneficiaryDetails", roleIDParameter, employerIDParameter, userIDParameter, adminUserIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_GetListPendSubmissionEE_Result> sp_GetListPendSubmissionEE(Nullable<int> employerID, string pendPeriod)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var pendPeriodParameter = pendPeriod != null ?
                new ObjectParameter("PendPeriod", pendPeriod) :
                new ObjectParameter("PendPeriod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetListPendSubmissionEE_Result>("sp_GetListPendSubmissionEE", employerIDParameter, pendPeriodParameter);
        }
    
        public virtual ObjectResult<sp_GetTaskSubStatusSummary_Result> sp_GetTaskSubStatusSummary(Nullable<int> employerID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTaskSubStatusSummary_Result>("sp_GetTaskSubStatusSummary", employerIDParameter);
        }
    
        public virtual ObjectResult<sp_GetListPendReview_Result> sp_GetListPendReview(Nullable<int> employerID, string pendPeriod)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var pendPeriodParameter = pendPeriod != null ?
                new ObjectParameter("PendPeriod", pendPeriod) :
                new ObjectParameter("PendPeriod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetListPendReview_Result>("sp_GetListPendReview", employerIDParameter, pendPeriodParameter);
        }
    
        public virtual int sp_ActivateBusinessManually(Nullable<int> employerID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActivateBusinessManually", employerIDParameter);
        }
    
        public virtual int sp_DeActivateBusiness()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeActivateBusiness");
        }
    
        public virtual ObjectResult<sp_GetListTaskCompleted_Result> sp_GetListTaskCompleted(Nullable<int> employerID, string weekPeriod)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var weekPeriodParameter = weekPeriod != null ?
                new ObjectParameter("WeekPeriod", weekPeriod) :
                new ObjectParameter("WeekPeriod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetListTaskCompleted_Result>("sp_GetListTaskCompleted", employerIDParameter, weekPeriodParameter);
        }
    
        public virtual ObjectResult<string> sp_GetListWkPdTaskCompleted(Nullable<int> employerID)
        {
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetListWkPdTaskCompleted", employerIDParameter);
        }
    
        public virtual int sp_ResetCompletedTask(Nullable<int> roleID, Nullable<int> employerID, Nullable<int> adminUserID, Nullable<int> reviewerID, Nullable<int> employeeID, Nullable<int> taskID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var employerIDParameter = employerID.HasValue ?
                new ObjectParameter("EmployerID", employerID) :
                new ObjectParameter("EmployerID", typeof(int));
    
            var adminUserIDParameter = adminUserID.HasValue ?
                new ObjectParameter("AdminUserID", adminUserID) :
                new ObjectParameter("AdminUserID", typeof(int));
    
            var reviewerIDParameter = reviewerID.HasValue ?
                new ObjectParameter("ReviewerID", reviewerID) :
                new ObjectParameter("ReviewerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var taskIDParameter = taskID.HasValue ?
                new ObjectParameter("TaskID", taskID) :
                new ObjectParameter("TaskID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ResetCompletedTask", roleIDParameter, employerIDParameter, adminUserIDParameter, reviewerIDParameter, employeeIDParameter, taskIDParameter);
        }
    
        public virtual ObjectResult<sp_SendEmail_NewTask_Weekly_Result> sp_SendEmail_NewTask_Weekly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SendEmail_NewTask_Weekly_Result>("sp_SendEmail_NewTask_Weekly");
        }
    
        public virtual ObjectResult<sp_SendNotification_PendTask_WeekPrior_Result> sp_SendNotification_PendTask_WeekPrior()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SendNotification_PendTask_WeekPrior_Result>("sp_SendNotification_PendTask_WeekPrior");
        }
    }
}
